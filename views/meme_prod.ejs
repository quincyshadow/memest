  <%- include('header'); -%>

  <div class="container-fluid pt-3 templator">
    <div class="container">
      <div class="row clearfix">

        <div class="col-sm">
          <img src="" />
        </div>

        <div class="col-sm">
          <p>Your final, published image.</p>
          <form>
            <form class>
              <div class="form-group row">
                <label for="imagedl_size" class="col-sm-4 col-form-label">Dimensions</label>
                <div class="col-sm-8 pt-2">
                  <input class="form-control" id="imagedl_size" type="range" min="50" max="900" step="10" value="500" data-orientation="horizontal">
                </div>
              </div>
              <button type="submit" class="btn btn-primary float-right">Submit</button>
            </form>
          </form>
        </div>

      </div>
    </div>
  </div>
  <div class="container pt-3">
    <h3>Select Your Meme</h3>

  </div>
  <div class="container pt-1">

    <div class="form-group">
      <input type="search" class="form-control filter__search js-shuffle-search" name="search" placeholder="Search..." data-search>
    </div>

  </div>

  <div class="container pt-2" style="overflow-y:auto; overflow-x: none; max-height: 400px;">
    <!-- Example row of columns -->

    <!-- <div class="col-12"><%= JSON.stringify(template[0]);%></div> -->
    <div id="grid" class="row my-shuffle-container">
      <!--  data-groups='["animal"]' data-date-created="2016-08-12" data-title="Crocodile" -->
      <!-- {"id":1,"category":"doge",
      "title":"Baby Doge","tags":"tags",
      "thumburl":"https://res.cloudinary.com/xdoge/image/upload/v1560896231/dogetemplate/FB_IMG_1559666266402_1_pgurkv",
      "fullszurl":"https://res.cloudinary.com/xdoge/image/upload/v1560896231/dogetemplate/FB_IMG_1559666266402_1_pgurkv"}
      -->
      <% template.forEach( (e) => { %>
      <figure class="grid__brick wp-caption col-xs mb-2 jq_imgselection" canvassrc="<%= e.fullszurl %>">
        <img src="<%= e.thumburl %>" alt="<%= e.title %>" />
        <figcaption class="wp-caption-text"><%= e.title %></figcaption>
      </figure>
      <% }) %>
      <div class="col-1 my-sizer-element"></div>
    </div>

  </div>
  </div> <!-- /container -->
  <div class="d_canvas"></div>

  <!-- Bootstrap core JavaScript
    ================================================== -->
  <!-- Placed at the end of the document so the pages load faster -->
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  <script src="static/shuffle.min.js"></script>
  <script src="static/js/fabric.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/rangeslider.js/2.3.2/rangeslider.min.js" integrity="sha256-vFhEtGnaQ2xB+yjBTSXxssthNcfdbzu+lmLYhCdp2Cc=" crossorigin="anonymous"></script>
  <!-- PLEASE MINIFY THIS JS, YOU CAN REMOVE UNEEDED ITEMS ON THE SITE FABRIC JS -->
  <script>
    'use strict';

    var Shuffle = window.Shuffle;

    var Demo = function(element) {
      this.element = element;

      this.shuffle = new Shuffle(element, {
        itemSelector: '.grid__brick',
        sizer: document.querySelector('.my-sizer-element'),
        isCentered: true
      });

      // Log events.
      this.addShuffleEventListeners();

      this._activeFilters = [];

      this.addSearchFilter();

      this.mode = 'exclusive';
    };

    Demo.prototype.toggleMode = function() {
      if (this.mode === 'additive') {
        this.mode = 'exclusive';
      } else {
        this.mode = 'additive';
      }
    };
    Demo.prototype.addShuffleEventListeners = function() {
      this.shuffle.on(Shuffle.EventType.LAYOUT, function(data) {
        console.log('layout. data:', data);
      });

      this.shuffle.on(Shuffle.EventType.REMOVED, function(data) {
        console.log('removed. data:', data);
      });
    };

    Demo.prototype.addSorting = function() {
      var buttonGroup = document.querySelector('.sort-options');

      if (!buttonGroup) {
        return;
      }

      buttonGroup.addEventListener('change', this._handleSortChange.bind(this));
    };

    Demo.prototype.addSearchFilter = function() {
      document.querySelector('.js-shuffle-search').addEventListener('keyup', this._handleSearchKeyup.bind(this));
    };
    // Filter the shuffle instance by items with a title that matches the search input.

    Demo.prototype._handleSearchKeyup = function(evt) {
      var searchText = evt.target.value.toLowerCase();

      this.shuffle.filter(function(element, shuffle) {
        var titleElement = element.querySelector('.wp-caption-text');
        var titleText = titleElement.textContent.toLowerCase().trim();


        console.log(titleText);
        return titleText.indexOf(searchText) !== -1;

        //Past the mvp allow to sort further by keyword or group,
        //see var groupA = JSON.parse(a.element.getAttribute('data-groups'))[0]
      });
    }

    document.addEventListener('DOMContentLoaded', function() {

          $("img").one("error", function() {
            $(this).attr("src", "static/images/150.png");
          });


          let imagewidthslider = $('input[type="range"]');

          imagewidthslider.rangeslider({
              polyfill: false,
              onInit: function() {
                var $handle = $('.rangeslider__handle', this.$range);
                updateHandle($handle[0], this.value);
              }
            })
            .on('input', function(e) {
              var $handle = $('.rangeslider__handle', e.target.nextSibling);
              updateHandle($handle[0], this.value);
            });

          function updateHandle(el, val) {
            el.textContent = val;
          }

          window.demo = new Demo(document.getElementById('grid'));

          // reference canvas element (with id="c")
          var canvas = new fabric.Canvas('c', {
            imageSmoothingEnabled: false,
          });

          //Extend the textbox object in fabricjs to allow parameters
          //'breakline'. https://jjwilly.com/fabric-js-2-0-breakwords-implementation/

          var _wrapLine = function(_line, lineIndex, desiredWidth, reservedSpace) {
            var lineWidth = 0,
              splitByGrapheme = this.splitByGrapheme,
              graphemeLines = [],
              line = [],
              // spaces in different languges?
              words = splitByGrapheme ? fabric.util.string.graphemeSplit(_line) : _line.split(this._wordJoiners),
              word = '',
              offset = 0,
              infix = splitByGrapheme ? '' : ' ',
              wordWidth = 0,
              infixWidth = 0,
              largestWordWidth = 0,
              lineJustStarted = true,
              additionalSpace = splitByGrapheme ? 0 : this._getWidthOfCharSpacing();

            reservedSpace = reservedSpace || 0;
            desiredWidth -= reservedSpace;
            for (var i = 0; i < words.length; i++) {
              // i would avoid resplitting the graphemes
              word = fabric.util.string.graphemeSplit(words[i]);
              wordWidth = this._measureWord(word, lineIndex, offset);
              offset += word.length;

              // Break the line if a word is wider than the set width
              if (this.breakWords && wordWidth >= desiredWidth) {

                if (!lineJustStarted) line.push(infix);

                // Loop through each character in word
                for (var w = 0; w < word.length; w++) {
                  var letter = word[w];
                  var letterWidth = this.getMeasuringContext().measureText(letter).width * this.fontSize / this.CACHE_FONT_SIZE;
                  if (lineWidth + letterWidth > desiredWidth) {
                    graphemeLines.push(line);
                    line = [];
                    lineWidth = 0;
                  } else {
                    line.push(letter);
                    lineWidth += letterWidth;
                  }
                }
                word = [];
              } else {
                lineWidth += infixWidth + wordWidth - additionalSpace;
              }

              if (lineWidth >= desiredWidth && !lineJustStarted) {
                graphemeLines.push(line);
                line = [];
                lineWidth = wordWidth;
                lineJustStarted = true;
              } else {
                lineWidth += additionalSpace;
              }

              if (!lineJustStarted) {
                line.push(infix);
              }
              line = line.concat(word);

              infixWidth = this._measureWord([infix], lineIndex, offset);
              offset++;
              lineJustStarted = false;
              // keep track of largest word
              if (wordWidth > largestWordWidth && !this.breakWords) {
                largestWordWidth = wordWidth;
              }
            }

            i && graphemeLines.push(line);

            if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {
              this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;
            }

            return graphemeLines;
          };


          fabric.util.object.extend(fabric.Textbox.prototype, {
            _wrapLine: _wrapLine,
          });


          canvas.setDimensions({
            width: '100%',
            height: 'auto'
          }, {
            cssOnly: true
          });

          canvas.set({
            imageSmoothingEnabled: true,
            enableRetinaScaling: true
          });
          var text = "Doge"
          var fonts = ["Impact"];
          let newtext = new fabric.Textbox(text, {
            fontFamily: "Impact",
            stroke: '#ffffff',
            strokeWidth: 4,
            fontSize: 100,
            top: 50,
            left: 0,
            width: 900,
            textAlign: 'center',
            breakWords: true,
          });

          // $('#imgone').on('click', function() {
          //   let canvas_bg_src = $(this).attr('canvassrc');
          // })
          //

          let selections = [];
          $('.jq_imgselection').each(function(index, element) {

            selections.push(this);

            $(this).on('click', function() {
              $(selections).removeClass('imgselected');
              let canvas_bg_src = $(this).attr('canvassrc');
              $(this).attr('selected', 'true')
              console.log(canvas_bg_src);
              $(this).addClass('imgselected');

              // fetch(canvas_bg_src)
              // .then(function() {
              //     console.log("ok");
              // }).catch(function() {
              //     console.log("error");
              // });

              fabric.Image.fromURL(canvas_bg_src, function(img) {
                //Do not allow callback on err
                if (img._element == null) {
                  console.error('errorcode')
                  return;
                } else {
                  canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas), {
                    left: 0,
                    top: 0,
                    width: 900,
                    height: 900
                  });
                  canvas.renderAll();
                }
              }, {
                crossOrigin: 'Anonymous'
              })

            })
          })

          // backgroundImage

          // changeAlign();

          // function changeAlign() {
          //   var val = align[Math.floor(Math.random() * align.length)];
          //   text.set('textAlign', val);
          //   el.innerHTML = 'Text Alignment : ' + val;
          //   canvas.setActiveObject(text);
          //   canvas.renderAll();
          // }
          canvas.add(newtext);

          $('#toptext').keyup(function() {
            console.log($(this).val());
            newtext.text = ($(this).val());
            canvas.renderAll();
          })

          let toptextcv;
          canvas.on('text:changed', function(e) {
            toptextcv = newtext.text;
            $('#toptext').val(toptextcv);
          })

          $('#objectimplement').on('click', function() {
            //
            //
            // //if(!window.localStorage){alert("This function is not supported by your browser."); return;}
            // //console.log(canvas.toDataURL())
            // var newTab = window.open();
            //
            // let imagecopy = new Image();
            // imagecopy.src = canvas.toDataURL();
            //
            // imagecopy.onload = function ()
            // {
            //     var imageincvvcopy = new fabric.Image(imagecopy);
            //     imageincvvcopy.set({
            //         padding: 0,
            //         top:20,
            //         width: 400,
            //         height: 400
            //     });
            //     imageincvvcopy.filters.push(
            //       new fabric.Image.filters.Resize({
            //         resizeType: 'hermite',
            //         scaleX: 0.4,
            //         scaleY: 0.4
            //       })
            //     );
            //     imageincvvcopy.applyFilters();
            //
            //     canvas.add(imageincvvcopy);
            //     canvas.bringToFront(imageincvvcopy);
            //     // canvas.renderAll();
            //
            // }
            //
            //   var img = new Image();
            //   newTab.document.write(`<h2>Right click, &#8618; Save image AS..`)
            //
            //   img.onload = function() {
            //     newTab.document.body.append(img);
            //     newTab.document.location.href = "#";
            //
            //   }
            //
            //   img.src = imageincvvcopy.toDataURL({
            //     format: 'png',
            //     enableRetinaScaling: false,
            //     multiplier: 1
            //   });
            //   newTab.document.close();

            }) //end objectimplement

            $('#savepng').on('click', function() {
              //if(!window.localStorage){alert("This function is not supported by your browser."); return;}
              //console.log(canvas.toDataURL())
              var newTab = window.open();
              var img = new Image();
              newTab.document.write(`<h2>Right click, &#8618; Save image AS..`)

              img.onload = function() {
                newTab.document.body.append(img);
                newTab.document.location.href = "#";
              }

              img.src = canvas.toDataURL({
                format: 'png',
                enableRetinaScaling: false,
                multiplier: 1
              });
              newTab.document.close();
            });

          });
  </script>
  </body>

  </html>
